Define Foo as (+ 1);

Print If (Foo 4, == 5)
  'PASS: Function call and return'
else
  'FAIL: Function call and return';

Define Foo as (+ 2);

Print If (Foo 5, == 7)
    'PASS: Function shadowing'
  else
    'FAIL: Function shadowing';

Do (
  Define Foo as (+ 3);

  Print If (Foo 5, == 8)
    'PASS: Function shadowing in block 1'
  else
    'FAIL: Function shadowing in block 1';
);

Print If (Foo 7, == 9)
  'PASS: Function shadowing in block 2'
else
  'FAIL: Function shadowing in block 2';

~~ Mutation is TODO
~~Let Recurred be False;
~~Define Bar as
~~(
~~  Do If (== 0) (
~~    Set Recurred to True;
~~  ) else (
~~    Bar with 0;
~~  );
~~);

~~call Bar with 10;
~~Print If (Recurred)
~~  'PASS: Recursion'
~~else
~~  'FAIL: Recursion';

~~ Put binary recursion test here when I implement binary recursion.
