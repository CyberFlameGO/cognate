Define Tuple be (Let X, Let Y, List (X, Y));

Define Prepend (Swap, Append);
Define Prefix  (Swap, Suffix);

Define For as
( Let Lst, Let Body;
  Do If (Lst, is Not Empty?)
  (
    push Head element in Lst;
    Do evaluate Body;
    For each in Tail of Lst
      Body;
  ) else ();
);

Define Range as
( Let A, Let B, Let S;
  List from
  (
    Define Count as
    (
      Let X;
      Do If (X, < B)
      (
        return X;
        Count from + X S;
      ) else ();
    );
    Count from A;
  );
);

Define Zip as
( Let List1; Let List2;
  List
  (
    For each in List2
    (
      push Head element in List1;
      Set List1 to Tail of List1;
      make Tuple;
    );
  );
);

Define Integer?
( Let X;
  X, == Floor X;
);

Define Reverse
( Let Lst;
  Do If (Lst, is Empty?) (Lst)
  else (
    Reverse Tail of Lst;
    Append List(Head element of Lst);
  );
);


Define Filter
( Let Cond; Let Lst;
  List
  (
    For each in Lst
    (
      Let X, push X;
      Do If Cond
      (
        X
      ) else ()
    )
  )
);

Define Map
( Let Expr; Let Lst;
  List ( For each in Lst do Expr );
);

Define Join
( Let Lst;
  For each in Lst (add Suffix) starting from '';
);
