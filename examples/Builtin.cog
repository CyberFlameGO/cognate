Define Tail as (Discard 1);
Define First as (Index 0);
Define Last as  (Let L, Index - 1 Length L of L);
Define Tuple be (Let X, Let Y, List (X, Y));

Define Prepend (Swap, Append);
Define Prefix  (Swap, Suffix);

Define Empty?
(
  Length, == 0
);

Define For as
( Let Lst, Let Body;
  If (Lst, is Not Empty?)
  (
    push First element in Lst;
    Do evaluate Body;
    For each in Tail of Lst
      Body;
  );
);

Define Range as
( Let A, Let B, Let S;
  List from
  (
    Define Count as
    (
      Let X;
      If (X, <= B)
      (
        return X; 
        Count from + X S;
      );
    );
    Count from A;
  );
);

Define Zip as
( Let List1; Let List2;
  List
  (
    For each in List2
    (
      push First element in List1;
      Set List1 to Tail of List1;
      make Tuple;
    );
  );
);

Define Integer?
( Let X;
  X, == Floor X;
);

Define Reverse
( Let Lst;
  If (Lst, is Empty?) (Lst);
  Else (
    Reverse Tail of Lst;
    Append List(First element of Lst);
  );
);


Define Filter
( Let Cond; Let Lst;
  List
  (
    For each in Lst
    (
      Let X, push X;
      If Cond
      (
        X;
      )
    )
  )
);

Define Map
( Let Expr; Let Lst;
  List ( For each in Lst do Expr );
);

Define Join
( Let Lst;
  For each in Lst (add Suffix) starting from '';
);
