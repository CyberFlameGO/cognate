Define Tuple be (Let X, Let Y, List (X, Y));

Define Prepend (Swap, Append);

Define For as
( Let Lst, Let Body;
  Do If (Lst, is Not Empty?)
  (
    push First element in Lst;
    Do evaluate Body;
    For each in Rest of Lst
      Body;
  ) else ();
);

Define Range as
( Let A, Let B, Let S;
  List from
  (
    Define Count as
    (
      Let X;
      Do If (X, < B)
      (
        return X;
        Count from + X S;
      ) else ();
    );
    Count from A;
  );
);

Define Splice as
( Let List1; Let List2;
  List
  (
    For each in List2
    (
      push First element in List1;
      Set List1 to Rest of List1;
      make Tuple;
    );
  );
);

Define Integer?
( Let X;
  X, == Floor X;
);


Define Filter
( Let Cond; Let Lst;
  List
  (
    For each in Lst
    (
      Twin;
      Do If (Do Cond, Not)
      (
        Drop;
      ) else ();
    )
  )
);

Define Map
( Let Expr; Let Lst;
  List ( For each in Lst do Expr );
);
